=begin pod

=head1 NAME

B<THIS IS A WORK-IN-PROGRESS: NOT YET RELEASED>

B<RakuFinance> - Show basis, gain/loss, current value, and other data for a portfolio of investments

=head1 SYNOPSIS

=begin code :lang<raku>

use RakuFinance;

=end code

=head1 DESCRIPTION

B<RakuFinance> is a module one can use to calculate various data for a
portfolio of investments including basis, gain/loss, current value,
and time-series statistics.

There are two main uses of the module:

=begin item 
Manipulate historical data

The user enters the symbol of one or more symbols in file B<Securities.dat>
in the format described inside the default, empty file.
Note the user may or may not actually own any of them.
=end item

=begin item 
Analyze current or past holdings

The user has to provide the accepted symbols for his or her securities
as well as their buy/sell data in a simple file format in a file named
B<Holdings.csv> (see B<Input Files>) along with pertinent historical
data available from public data sources (see B<Data Sources>).

=end item

Note the module is currently designed for the US but should be able to
be modified to handle currency and securities for any country with the
help of an interested collaborator. Contact the author if you are
volunteering.

=head2 Transactions

Transactions recognized by this module currently are:

=begin table
Type         | Code
---          + ---
Buy          | b
Sell         | se
Split        | sp
Merger       | m
Dividend     | d
Capital gain | c
=end table

Note transaction codes may be entered in lower- or upper-case.

In addition to the transaction type, each transaction for a security
on the same date has a temporal number to distinguish its order of
execution regardless of type.

The following table shows a hypothetical, abbreviated set of
transactions for security XXX (number of shares, prices, and other
transaction data are not shown).

=begin table
Security | Date       | Transaction | Transaction
         |            | Code        | Order
---      + ---        + ---         + ---
XXX      | 2022-01-01 | b           | 1
XXX      | 2022-01-01 | d           | 2
XXX      | 2022-01-01 | sp          | 3
XXX      | 2022-01-01 | c           | 4
XXX      | 2022-01-01 | b           | 5
=end table

=head2 Environment Variables

The working directory chosen by the user should be a dedicated
directory with several subdirectories to hold public data of various
types.

=head3 B<RakFinPrivDataDir>

The user's personal data of buys, holdings, and sales should be
segregated into another directory B<outside of the working
directory>. The absolute path of that directory must be defined in the
environment variable B<RakFinPrivDataDir>.  If it is not defined or
found to be invalid, the program will so advise and abort.

=head3 B<RakFinPubDataDir>

Publicly available data is expected to be in local directory
'public-data' or in the directory defined by environment variable
B<RakFinPubDataDir>.  If it is not defined or found to be invalid, the
program will so advise and abort.

=head2 External Input Files

Currently, input transaction and other data files can be read from the following
sources:

=item TD Ameritrade (L<https://tdameritrade.com>)
=item Fidelity (L<https://fidelity.com>)
=item Yahoo Finance (L<https://yahoo.com>)

Other data formats may be added in the future. Interested users should file
an issue if they are willing to help.

=head2 Internal Input Files

User data for security holdings as well as securities of interest
are kept in two different files: (1) B<Portfolio.dat> and B<Holdings.csv>.
The CSV file is best managed by reading with LibreOffice or similar
program, modifying as desired, and saving again in CSV format.

=head2 Data Sources

=head2 User Program

An executable Raku program, B<finance>, is installed as part of this module. It provides
modes for calculating the following statistics for a portfolio:

=item 1 - create a CSV file showing all transactions by date, symbol, transaction order (for a single security or all)
=item 3 - create a CSV file showing basis for
=item 4 - create a CSV file showing current value, gain/loss, basis, and return on investment (for a single security or all)

=head2 Planned Features

=item Live updates via one of several possible free or paid sources
=item Interface with an SQLite database file in GnuCash format (see L<https://gnucash.org>)
=item Interface with the publicly available EDGAR data from the US Securuties and Exchange Commission (SEC)
=item Accept inputs via a JSON file
=item Output files in JSON format

=head2 User's Configuration File

The B<finance> program requires the user to define his or her
commodities by listing their symbols in a confguration file named
B<Portfolio.dat> located in the working directory.  The file uses a
simple text file with comments begining with a '#' and a list of
symbols, one per line.  Following is a simple example:

=begin code
# Your list of securities of interest are entered here,
# one per line.  All are assumed to have dividends and
# capital gains reinvested since purchase unless there
# is a stop date as the second word on the same line as
# the symbol. The second word must be the date (in
# format YYYY-MM-DD) when the security B<stopped having
# dividends reinvested>.
  ARTIX
  JSVAX
  SLASX
  TAREX
  MRK       2000-01-01
=end code

Note B<finance> will create an empty configuration file, with
instructions, the first time you execute it (if none already exists).

=head1 CREDITS

The author is indebted to the developers of GnuCash (see
L<https://gnucash.org>) for their account schema for commodities.

=head1 AUTHOR

Tom Browder <tbrowder@acm.org>

=head1 COPYRIGHT AND LICENSE

Copyright 2022 Tom Browder

This library is free software; you may redistribute it or modify it
under the Artistic License 2.0.

=end pod
